  <config>
    <native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">
      <version>16.11</version>
      <boot-start-marker/>
      <boot-end-marker/>
      <memory>
        <free>
          <low-watermark>
            <processor>80526</processor>
          </low-watermark>
        </free>
      </memory>
      <service>
        <password-encryption/>
        <timestamps>
          <debug>
            <datetime>
              <msec/>
            </datetime>
          </debug>
          <log>
            <datetime>
              <msec/>
             </datetime>
          </log>
        </timestamps>
      </service>
      <platform>
        <console xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-platform">
          <output>serial</output>
        </console>
      </platform>
      <hostname>Core1</hostname>
      <enable>
        <secret>
          <type>9</type>
          <secret>$9$5spXfpjbtskouk$FtW8jyp8aujkcRLZPmtsDfOoL57Qhn3FIxYt0E6HBjM</secret>
        </secret>
      </enable>
      <username>
        <name>kamil</name>
        <privilege>15</privilege>
        <secret>
          <encryption>9</encryption>
          <secret>$9$GqO8ymcAt2PY3k$tlpfkos9/dTplw9iNo.A6X9GNTTdWym6Y/aULwzgtrQ</secret>
        </secret>
      </username>
      <ip>
        {% for n in host.facts.ip.vrf %}
        <vrf>
          <name>{{ n.name }}</name>
          <description>{{ n.description }}</description>
        </vrf>
        {% endfor %}
        <domain>
          <name>{{ host.facts.ip.domain }}</name>
        </domain>
        <forward-protocol>
          <protocol>nd</protocol>
        </forward-protocol>
        {% if host.facts.ip.static_routes is defined %}
        {% for n in host.facts.ip.static_routes %}
        <route>
          <ip-route-interface-forwarding-list>
            <prefix>{{ n.network }}</prefix>
            <mask>{{ n.mask }}</mask>
            <fwd-list>
              <fwd>{{ n.fwd }}</fwd>
            </fwd-list>
          </ip-route-interface-forwarding-list>
        </route>
        {% endfor %}
        {% endif %}
        <ssh>
          <version>2</version>
        </ssh>
        <tftp>
          <source-interface>
            <GigabitEthernet>{{ host.facts.ip.tftp_source_gi_int }}</GigabitEthernet>
          </source-interface>
        </tftp>
        <access-list>
          <extended xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-acl">
            <name>meraki-fqdn-dns</name>
          </extended>
          {% if host.facts.ip.extended_acl is defined %}
          {% for acl in host.facts.ip.extended_acl %}
          <extended xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-acl">
            <name>{{ acl.name }}</name>
            {% for seq in acl.sequences %}
            <access-list-seq-rule>
              <sequence>{{ seq.number }}</sequence>
              <ace-rule>
                <action>{{ seq.action }}</action>
                <protocol>{{ seq.protocol }}</protocol>
                <ipv4-address>{{ seq.srcip }}</ipv4-address>
                <mask>{{ seq.srcmask }}</mask>
                <dest-ipv4-address>{{ seq.destip }}</dest-ipv4-address>
                <dest-mask>{{ seq.destmask }}</dest-mask>
              </ace-rule>
            </access-list-seq-rule>
            {% endfor %}
          </extended>
          {% endfor %}
          {% endif %}
        </access-list>
        <http xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-http">
          <authentication>
            <local/>
          </authentication>
          <server>true</server>
          <secure-server>true</secure-server>
          <client>
            <source-interface> {{ host.facts.ip.source_interface }}</source-interface>
          </client>
        </http>
      </ip>
      <interface>
        {% for int in host.facts.interfaces.GigEthernet %}
        <GigabitEthernet>
          <name>{{ int.name }}</name>
          {% if int.description is defined %}
          <description>{{ int.description }}</description>
          {% endif %}
          {% if int.shutdown is defined %}
          <shutdown/>
          {% endif %}
          {% if int.ip is defined %}
          <ip>
            {% if int.vrf is defined %}
            <vrf>
              <forwarding>
                <word>{{ int.vrf }}</word>
              </forwarding>
            </vrf>
            {% endif %}
            <address>
              <primary>
                <address>{{ int.ip }}</address>
                <mask>{{ int.mask }}</mask>
              </primary>
            </address>
          </ip>
          {% elif int.unnumbered is defined %}
           <ip>
            <unnumbered>{{ int.unnumbered }}</unnumbered>
            <ospf xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-ospf">
              <network>{{ int.ospf_network }}</network>
            </ospf>
          </ip>
          {% endif %}
          <mop>
            <enabled>false</enabled>
            <sysid>false</sysid>
          </mop>
          {% if int.crypto_map is defined %}
          <crypto xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-crypto">
            <map>
              <tag>{{ int.crypto_map }}</tag>
            </map>
          </crypto>
          {% endif %}
          <negotiation xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-ethernet">
            <auto>true</auto>
          </negotiation>
        </GigabitEthernet>
        {% endfor %}
        {% for int in host.facts.interfaces.Loopback %}
        <Loopback>
          <name>{{ int.name }}</name>
          <description>{{ int.description }}</description>
          <ip>
            <address>
              <primary>
                <address>{{ int.ip }}</address>
                <mask>{{ int.mask }}</mask>
              </primary>
            </address>
          </ip>
        </Loopback>
        {% endfor %}
      </interface>
      <control-plane/>
      <login>
        <on-success>
          <log/>
        </on-success>
      </login>
      <multilink>
        <bundle-name xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-ppp">authenticated</bundle-name>
      </multilink>
      <redundancy/>
      <spanning-tree>
        <extend xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-spanning-tree">
          <system-id/>
        </extend>
      </spanning-tree>
      <subscriber>
        <templating/>
      </subscriber>
      <crypto>
        {% if host.facts.crypto.transform_sets is defined %}
        <ipsec xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-crypto">
          {% for set in host.facts.crypto.transform_sets %}
          <transform-set>
            <tag>{{ set.tag }}</tag>
            <esp>{{ set.esp }}</esp>
            <key-bit>{{ set.key_bit }}</key-bit>
            <esp-hmac>{{ set.esp_hmac }}</esp-hmac>
            <mode>
              <tunnel/>
            </mode>
          </transform-set>
          {% endfor %}
        </ipsec>
        {% endif %}
        {% if host.facts.crypto.isakmp_keys is defined and host.facts.crypto.policy is defined %}
        <isakmp xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-crypto">
          {% for key in host.facts.crypto.isakmp_keys %}
          <key>
            <key-address>
              <key>{{ key.key }}</key>
              <addr4-container>
                <address>{{ key.peer }}</address>
              </addr4-container>
            </key-address>
          </key>
          {% endfor %}
          {% for policy in host.facts.crypto.policy %}
          <policy>
            <number>{{ policy.number }}</number>
            <authentication>{{ policy.auth }}</authentication>
            <group>{{ policy.group }}</group>
            <hash>{{ policy.hash }}</hash>
            <lifetime>{{ policy.lifetime }}</lifetime>
          </policy>
          {% endfor %}
        </isakmp>
        {% endif %}
        {% if host.facts.crypto.crypto_map is defined %}
        <crypto-map xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-crypto">
          {% for map in host.facts.crypto.crypto_map %}
          <map>
            <name>{{ map.name }}</name>
            <sequence-number>{{ map.sequence }}</sequence-number>
            <keying>{{ map.keying }}</keying>
            <match>
              <address>{{ map.match }}</address>
            </match>
            <set>
              <peer>
                <address>{{ map.peer }}</address>
              </peer>
              <pfs>
                <group>{{ map.pfs }}</group>
              </pfs>
              <transform-set>{{ map.transform_set }}</transform-set>
            </set>
          </map>
          {% endfor %}
        </crypto-map>
        {% endif %}
        <pki xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-crypto">
          <certificate>
            <chain>
              <name>SLA-TrustPoint</name>
              <certificate>
                <serial>01</serial>
                <certtype>ca</certtype>
              </certificate>
            </chain>
            <chain>
              <name>TP-self-signed-{{ host.facts.crypto.self_signed_certificate }}</name>
              <certificate>
                <serial>01</serial>
                <certtype>self-signed</certtype>
              </certificate>
            </chain>
          </certificate>
          <trustpoint>
            <id>SLA-TrustPoint</id>
            <enrollment>
              <pkcs12/>
            </enrollment>
            <revocation-check>crl</revocation-check>
          </trustpoint>
          <trustpoint>
            <id>TP-self-signed-{{ host.facts.crypto.self_signed_certificate }}</id>
            <enrollment>
              <selfsigned/>
            </enrollment>
            <revocation-check>none</revocation-check>
            <subject-name>cn=IOS-Self-Signed-Certificate-{{ host.facts.crypto.self_signed_certificate }}</subject-name>
          </trustpoint>
        </pki>
      </crypto>
      <router>
        {% if host.facts.ospf is defined %}
        <ospf xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-ospf">
          <id>{{ host.facts.ospf.id }}</id>
          <router-id>{{ host.facts.ospf.rid }}</router-id>
          {% for n in host.facts.ospf.networks %}
          <network>
            <ip>{{ n.ip }}</ip>
            <mask>{{ n.mask }}</mask>
            <area>{{ n.area }}</area>
          </network>
          {% endfor %}
        </ospf>
        {% endif %}
        {% if host.facts.bgp is defined %}
        <bgp xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-bgp">
          <id>{{ host.facts.bgp.id }}</id>
          <bgp>
            <log-neighbor-changes>true</log-neighbor-changes>
            <router-id>
              <ip-id>{{ host.facts.bgp.rid }}</ip-id>
            </router-id>
          </bgp>
          {% for n in host.facts.bgp.neighbors %}
          <neighbor>
            <id>{{ n.id }}</id>
            <remote-as>{{ n.as }}</remote-as>
            <update-source>
              <Loopback>{{ n.loopsource }}</Loopback>
            </update-source>
          </neighbor>
          {% endfor %}
          <address-family>
            <no-vrf>
              <ipv4>
                <af-name>unicast</af-name>
                <ipv4-unicast>
                  {% for n in host.facts.bgp.ipv4_unicast_family %}
                  <neighbor>
                    <id>{{ n.neighborid }}</id>
                    <activate/>
                  </neighbor>
                  {% endfor %}
                  {% for n in host.facts.bgp.networks %}
                  <network>
                    <with-mask>
                      <number>{{ n.number }}</number>
                      <mask>{{ n.mask }}</mask>
                    </with-mask>
                  </network>
                  {% endfor %}
                </ipv4-unicast>
              </ipv4>
              <ipv4>
                <af-name>multicast</af-name>
              </ipv4>
            </no-vrf>
          </address-family>
        </bgp>
        {% endif %}
        {% if host.facts.eigrp is defined %}
        <eigrp xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-eigrp">
          <id>{{ host.facts.eigrp.name }}</id>
          <address-family>
            <type>ipv4</type>
            <af-ip-list>
              <unicast-multicast>unicast</unicast-multicast>
              <autonomous-system>{{ host.facts.eigrp.as }}</autonomous-system>
              <eigrp>
                <router-id>{{ host.facts.eigrp.rid }}</router-id>
              </eigrp>
              {% for n in host.facts.eigrp.networks %}
              <network>
                <number>{{ n.number }}</number>
                <wild-card>{{ n.wildcard }}</wild-card>
              </network>
              {% endfor %}
              <topology>
                <base/>
              </topology>
            </af-ip-list>
          </address-family>
        </eigrp>
        {% endif %}
      </router>
      <license>
        <udi>
          <pid>{{ host.facts.license.pid }}</pid>
          <sn>{{ host.facts.license.sn }}</sn>
        </udi>
      </license>
      <line>
        <console>
          <first>0</first>
          <stopbits>1</stopbits>
        </console>
        <vty>
          <first>0</first>
          <last>4</last>
          <login>
            <local/>
          </login>
          <transport>
            <input>
              <input>ssh</input>
            </input>
          </transport>
        </vty>
        <vty>
          <first>5</first>
          <last>15</last>
          <login>
            <local/>
          </login>
          <transport>
            <input>
              <input>ssh</input>
            </input>
          </transport>
        </vty>
      </line>
      <ntp>
        <server xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-ntp">
          {% for n in host.facts.ntp.servers %}
          <server-list>
            <ip-address>{{ n.ip }}</ip-address>
          </server-list>
          {% endfor %}
        </server>
      </ntp>
      <diagnostic xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-diagnostics">
        <bootup>
          <level>minimal</level>
        </bootup>
      </diagnostic>
    </native>
  </config>
